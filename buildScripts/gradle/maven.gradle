task buildSdk() {
    dependsOn gradle.includedBuild('core').task(':gradle-plugin:assemble')
    dependsOn gradle.includedBuild('core').task(':interface:interface-aar:jarReleasePackage')
    dependsOn gradle.includedBuild('core').task(':loader:loader-aar:assembleRelease')
    dependsOn gradle.includedBuild('core').task(':manager:assembleRelease')
    dependsOn gradle.includedBuild('core').task(':runtime:aar:jarReleasePackage')
    dependsOn gradle.includedBuild('core').task(':transform:assemble')

    dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:dynamic-host-aar:jarReleasePackage')
    dependsOn gradle.includedBuild('dynamic').task(':dynamic-loader:dynamic-loader-aar:assembleRelease')
    dependsOn gradle.includedBuild('dynamic').task(':dynamic-manager:assembleRelease')
}

task lintSdk() {
    dependsOn gradle.includedBuild('core').task(':interface:interface-aar:lint')
    dependsOn gradle.includedBuild('core').task(':loader:loader-aar:lint')
    dependsOn gradle.includedBuild('core').task(':manager:lint')
    dependsOn gradle.includedBuild('core').task(':runtime:aar:lint')

    dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:dynamic-host-aar:lint')
    dependsOn gradle.includedBuild('dynamic').task(':dynamic-loader:dynamic-loader-aar:lint')
    dependsOn gradle.includedBuild('dynamic').task(':dynamic-manager:lint')
}

apply from: 'buildScripts/gradle/GitHelper.gradle'
apply plugin: 'maven-publish'

static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

def setScm(scm) {
    scm.appendNode('connection', 'http://git.code.oa.com/now-shadow/shadow.git')
    scm.appendNode('url', "https://git.code.oa.com/now-shadow/shadow/commit/$project.GIT_SHORT_REV")
}

def setGeneratePomFileAndDepends(publicationName) {
    model {
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
        }
    }
    tasks.whenTaskAdded { theTask ->
        if (theTask.name.equals("generatePomFileFor${publicationName.capitalize()}Publication")) {
            theTask.dependsOn(project.getTasksByName("buildSdk", false).first())
        }
    }
}

static def isPublishRelease() {
    return "${System.env.PUBLISH_RELEASE}".equalsIgnoreCase("true")
}

def coreGroupId = 'com.tencent.shadow.core'
def corePath = 'projects/sdk/core'

publishing {
    publications {
        gradlePlugin(MavenPublication) {
            groupId coreGroupId
            artifactId 'gradle-plugin'
            version project.ARTIFACT_VERSION
            artifact("$corePath/gradle-plugin/build/libs/gradle-plugin.jar")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform', project.ARTIFACT_VERSION))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
        interface_(MavenPublication) {
            groupId coreGroupId
            artifactId 'interface'
            version project.ARTIFACT_VERSION
            artifact("$corePath/interface/interface-aar/build/outputs/jar/interface-aar-release.jar")

            pom.withXml {
                def root = asNode()
                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
        coreLoader(MavenPublication) {
            groupId coreGroupId
            artifactId 'loader'
            version project.ARTIFACT_VERSION
            artifact("$corePath/loader/loader-aar/build/outputs/aar/loader-aar-release.aar")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('provided',coreGroupId, 'runtime', project.ARTIFACT_VERSION))
                dependencies.append(getDependencyNode('provided', coreGroupId, 'interface', project.ARTIFACT_VERSION))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
        coreManager(MavenPublication) {
            groupId coreGroupId
            artifactId 'manager'
            version project.ARTIFACT_VERSION
            artifact("$corePath/manager/build/outputs/aar/manager-release.aar")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('provided', coreGroupId, 'interface', project.ARTIFACT_VERSION))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
        runtime(MavenPublication) {
            groupId coreGroupId
            artifactId 'runtime'
            version project.ARTIFACT_VERSION
            artifact("$corePath/runtime/aar/build/outputs/jar/aar-release.jar")

            pom.withXml {
                def root = asNode()

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
        transform(MavenPublication) {
            groupId coreGroupId
            artifactId 'transform'
            version project.ARTIFACT_VERSION
            artifact("$corePath/transform/build/libs/transform.jar")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', 'org.javassist', 'javassist', '3.22.0-GA'))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "rdm"
                password "rdm"
            }
            if (isPublishRelease()) {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty/"
            } else {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty-snapshots"
            }
        }
    }
}

setGeneratePomFileAndDepends('gradlePlugin')
setGeneratePomFileAndDepends('interface_')
setGeneratePomFileAndDepends('coreLoader')
setGeneratePomFileAndDepends('coreManager')
setGeneratePomFileAndDepends('runtime')
setGeneratePomFileAndDepends('transform')
