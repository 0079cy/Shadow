apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId "com.tencent.shadow.demo_host"
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion 24
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.demo.host.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/demo-plugin/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/demo-plugin/release/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation 'commons-io:commons-io:2.5'//example复制apk用的.
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'com.tencent.shadow.core:common'
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.tencent.shadow.core:loader'
    implementation 'com.tencent.shadow.core:runtime'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def createCopyTask(projectName, buildType, name, apkName) {
    def split = (projectName as String).split(':')
    def moduleName = split[split.length - 1]
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    def inputFile = file("${project("${projectName}").getBuildDir()}/outputs/apk/${buildType}/${moduleName}-${buildType}.apk")
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:assemble${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        task.dependsOn createCopyTask(':projects:demo:plugin-app:demo-plugin', 'debug', 'demo-plugin', 'plugin.apk')
    }
    if (task.name == "generateReleaseAssets") {
        task.dependsOn createCopyTask(':projects:demo:plugin-app:demo-plugin', 'release', 'demo-plugin', 'plugin.apk')
    }
}