apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId "com.tencent.shadow.demo_host"
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion 22
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.demo.host.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/pluginmanager-apk/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/pluginmanager-apk/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.5'//example复制apk用的.
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':projects:demo:test-util')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.1.1-alpha02'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-remote:3.2.0-alpha02'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.2.0-alpha02'
    androidTestImplementation "androidx.test:runner:1.1.2-alpha02"

    implementation project(':projects:demo:host_interface')
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'pluginmanager-apk'
    def pluginManagerApkFile = file(
            "${project(":projects:demo:pluginmanager-apk").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':projects:demo:pluginmanager-apk',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    def demoPluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
    generateAssetsTask.dependsOn createCopyTask(
            ':projects:demo:plugin-app:demo-plugin',
            buildType,
            'plugin-zip',
            "plugin-${buildType}.zip",
            demoPluginZip,
            "package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}