apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: "${rootDir.parentFile.parentFile.parentFile}/buildScripts/gradle/GitHelper.gradle"

group 'com.tencent.shadow.core'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'plugin-loader-release.pro'
        }

        release {
            consumerProguardFiles 'plugin-loader-release.pro'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.slf4j:slf4j-api:1.7.25'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    compileOnly project(':runtime')
    implementation 'com.tencent.shadow:shadow-lint'
}

def jarPackage(buildType) {
    return tasks.create("jar${buildType.capitalize()}Package", Copy) {
        def aarFile = file(project.buildDir.path + "/outputs/aar/${project.name}-${buildType}.aar")
        def outputDir = file(project.buildDir.path + "/outputs/jar")

        from zipTree(aarFile)
        into outputDir
        include 'classes.jar'
        rename 'classes.jar', "${project.name}-${buildType}.jar"
        group = 'build'
        description = '生成jar包'
    }.dependsOn(project.getTasksByName("assemble${buildType.capitalize()}", false).first())
}

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            jarPackage(buildTypeName)
        }
    }
}

apply plugin: 'maven-publish'

static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

publishing {
    publications {
        release(MavenPublication) {
            groupId 'com.tencent.shadow'
            artifactId "${project.name}"
            version project.ARTIFACT_VERSION
            artifact("build/outputs/aar/${project.name}-release.aar")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', "$kotlin_version"))
                dependencies.append(getDependencyNode('compile', 'org.slf4j', 'slf4j-api', '1.7.25'))
                dependencies.append(getDependencyNode('provided', 'com.tencent.shadow', 'shadow-runtime', "${project.ARTIFACT_VERSION}"))

                def scm = root.appendNode('scm')
                scm.appendNode('connection', 'http://git.code.oa.com/plugin-framework/shadow.git')
                scm.appendNode('url', "http://git.code.oa.com/plugin-framework/shadow/commit/$project.GIT_SHORT_REV")
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "rdm"
                password "rdm"
            }
            if (isPublishRelease()) {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty/"
            } else {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty-snapshots"
            }
        }
    }
}

model {
    tasks.generatePomFileForReleasePublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("generatePomFileForReleasePublication")) {
        theTask.dependsOn(project.getTasksByName("assembleRelease", false).first())
    }
}

static def isPublishRelease() {
    return "${System.env.PUBLISH_RELEASE}".equalsIgnoreCase("true")
}