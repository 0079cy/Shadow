apply plugin: 'com.android.library'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def jarPackage(buildType) {
    return tasks.create("jar${buildType.capitalize()}Package", Copy) {
        def aarFile = file(project.buildDir.path + "/outputs/aar/${project.name}-${buildType}.aar")
        def outputDir = file(project.buildDir.path + "/outputs/jar")

        from zipTree(aarFile)
        into outputDir
        include 'classes.jar'
        rename 'classes.jar', "${project.name}-${buildType}.jar"
        group = 'build'
        description = '生成jar包'
    }.dependsOn(project.getTasksByName("assemble${buildType.capitalize()}", false).first())
}

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            jarPackage(buildTypeName)
        }
    }
}

apply plugin: 'maven-publish'

def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}


publishing {
    publications {
        if (isPublishRelease()) {
            release(MavenPublication) {
                groupId 'com.tencent.shadow'
                artifactId "${project.name}"
                version project.ARTIFACT_VERSION
                artifact("build/outputs/jar/${project.name}-${project.ARTIFACT_VERSION}-release.jar")
                pom.withXml {
                    def root = asNode()
                    def scm = root.appendNode('scm')
                    //todo 修复这里的scm信息
                    scm.appendNode('connection', "${System.env.SVN_URL}?p=${System.env.SVN_REVISION}")
                }
            }
        } else {
            debug(MavenPublication) {
                groupId 'com.tencent.shadow'
                artifactId "${project.name}"
                version project.ARTIFACT_VERSION + '-debug'
                artifact("build/outputs/jar/${project.name}-${project.ARTIFACT_VERSION}-debug.jar")
            }
            release(MavenPublication) {
                groupId 'com.tencent.shadow'
                artifactId "${project.name}"
                version project.ARTIFACT_VERSION + '-release'
                artifact("build/outputs/jar/${project.name}-${project.ARTIFACT_VERSION}-release.jar")
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "rdm"
                password "rdm"
            }
            if (isPublishRelease()) {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty/"
            } else {
                url "http://maven.oa.com/nexus/content/repositories/thirdparty-snapshots"
            }
        }
    }
}

model {
    tasks.generatePomFileForDebugPublication {
        destination = file("$buildDir/debug-pom.xml")
    }
    tasks.generatePomFileForReleasePublication {
        destination = file("$buildDir/release-pom.xml")
    }
}

static def isPublishRelease() {
    return "${System.env.PUBLISH_RELEASE}".equalsIgnoreCase("true")
}